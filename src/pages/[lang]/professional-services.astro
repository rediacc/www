---
import BaseLayout from '../../layouts/BaseLayout.astro';
import ServicePackageCard from '../../components/ServicePackageCard.astro';
import { createTranslator } from '../../i18n/utils';
import { SUPPORTED_LANGUAGES } from '../../i18n/language-utils';
import type { Language } from '../../i18n/types';
import { EXTERNAL_LINKS } from '../../config/constants';
import '../../styles/professional-services-page.css';

export async function getStaticPaths() {
  return SUPPORTED_LANGUAGES.map((lang) => ({
    params: { lang },
    props: { lang },
  }));
}

const { lang } = Astro.params as { lang: Language };
const { t, ta, to } = createTranslator(lang);

const planNameMap = {
  community: t('pages.pricing.plans.community.name'),
  pro: t('pages.pricing.plans.pro.name'),
  business: t('pages.pricing.plans.business.name'),
  enterprise: t('pages.pricing.plans.enterprise.name')
};

const psAccess = to('pages.pricing.professionalServices.access');
const psAccessLabels = psAccess?.labels ?? {};
const psAccessTiers = psAccess?.tiers ?? [];

const psRetainers = to('pages.pricing.professionalServices.retainers');
const psRetainerItems = psRetainers?.items ?? [];

// Service packages data
const servicePackages = [
  {
    id: 'standard',
    name: t('pages.pricing.professionalServices.packages.standard.name'),
    price: t('pages.pricing.professionalServices.packages.standard.price'),
    turnaround: t('pages.pricing.professionalServices.packages.standard.turnaround'),
    description: t('pages.pricing.professionalServices.packages.standard.description'),
    isPopular: false,
    icon: '<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="3" y="3" width="18" height="18" rx="2"/><path d="M9 11l3 3 5-5"/></svg>'
  },
  {
    id: 'priority',
    name: t('pages.pricing.professionalServices.packages.priority.name'),
    price: t('pages.pricing.professionalServices.packages.priority.price'),
    turnaround: t('pages.pricing.professionalServices.packages.priority.turnaround'),
    description: t('pages.pricing.professionalServices.packages.priority.description'),
    isPopular: true,
    icon: '<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"/></svg>'
  },
  {
    id: 'emergency',
    name: t('pages.pricing.professionalServices.packages.emergency.name'),
    price: t('pages.pricing.professionalServices.packages.emergency.price'),
    turnaround: t('pages.pricing.professionalServices.packages.emergency.turnaround'),
    description: t('pages.pricing.professionalServices.packages.emergency.description'),
    isPopular: false,
    icon: '<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"/><path d="M12 6v6l4 2"/></svg>'
  }
];

// Service types with details for each package
const serviceTypesDataRaw = ta('pages.pricing.professionalServices.serviceTypes.services');
const serviceTypes = serviceTypesDataRaw.map((service: any) => ({
  name: service.name,
  icon: getIconForService(service.id),
  standard: service.standard,
  priority: service.priority,
  emergency: service.emergency
}));

// Get pricing factors data
const pricingFactorsData = ta('pages.pricing.professionalServices.pricingFactors.factors');
const pricingFactors = pricingFactorsData;

function getIconForService(id: string): string {
  const icons: Record<string, string> = {
    'data-migration': '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M9 3L5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z"/></svg>',
    'ransomware-recovery': '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM9 6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9V6z"/></svg>',
    'security-assessment': '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4z"/></svg>',
    'infrastructure-scaling': '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/></svg>',
    'team-training': '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M12 3L1 9l4 2.18v6L12 21l7-3.82v-6l2-1.09V17h2V9L12 3zm6.82 6L12 12.72 5.18 9 12 5.28 18.82 9zM17 15.99l-5 2.73-5-2.73v-3.72L12 15l5-2.73v3.72z"/></svg>',
    'performance-optimization': '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M20.5 11H19V7c0-1.1-.9-2-2-2h-4V3.5C13 2.12 11.88 1 10.5 1S8 2.12 8 3.5V5H4c-1.1 0-1.99.9-1.99 2v3.8H3.5c1.49 0 2.7 1.21 2.7 2.7s-1.21 2.7-2.7 2.7H2V20c0 1.1.9 2 2 2h3.8v-1.5c0-1.49 1.21-2.7 2.7-2.7 1.49 0 2.7 1.21 2.7 2.7V22H17c1.1 0 2-.9 2-2v-4h1.5c1.38 0 2.5-1.12 2.5-2.5S21.88 11 20.5 11z"/></svg>',
    'custom-integration': '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>'
  };
  return icons[id] || '';
}
---

<BaseLayout
  lang={lang}
  title={t('pages.professionalServices.meta.title')}
  description={t('pages.professionalServices.meta.description')}
  keywords={t('pages.professionalServices.meta.keywords')}
  ogType="website"
  structuredDataType="organization"
>
  <article class="ps-page">
    <!-- Hero Section -->
    <section class="ps-hero section-dark">
      <div class="ps-hero-content">
        <h1>{t('pages.professionalServices.hero.title')}</h1>
        <p class="hero-subtitle">{t('pages.professionalServices.hero.subtitle')}</p>
        <div class="hero-badge">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
            <path d="M13 10V3L4 14h7v7l9-11h-7z"/>
          </svg>
          <span>{t('pages.professionalServices.hero.badge')}</span>
        </div>
      </div>
    </section>

    <!-- Value Proposition Section -->
    <section class="ps-value section-light">
      <div class="container">
        <div class="value-content">
          <h2>{t('pages.professionalServices.value.heading')}</h2>
          <p class="value-description">{t('pages.professionalServices.value.description')}</p>
          <div class="value-stats">
            {ta('pages.professionalServices.value.statistics').map((stat: string) => (
              <div class="value-stat">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polyline points="20 6 9 17 4 12"/>
                </svg>
                <span>{stat}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- Service Package Cards Section -->
    <section class="ps-packages section-dark">
      <div class="container">
        <div class="ps-packages-header">
          <h2>{t('pages.professionalServices.packages.heading')}</h2>
          <p class="packages-subtitle">{t('pages.professionalServices.packages.subtitle')}</p>
        </div>

        <div class="service-packages-grid">
          {servicePackages.map(pkg => (
            <ServicePackageCard package={pkg} lang={lang} />
          ))}
        </div>
      </div>
    </section>

    <!-- Professional Services Access Matrix -->
    <section class="ps-access-section section-light">
      <div class="container">
        <div class="ps-access">
          <div class="ps-access-intro">
            <h2>{psAccess?.heading}</h2>
            <p>{psAccess?.description}</p>
          </div>
          <div class="ps-access-rows">
            {psAccessTiers.map((tier: any, index: number) => (
              <div class={`ps-access-row ${index % 2 === 0 ? 'align-left' : 'align-right'}`}>
                <div class="ps-access-row-header">
                  <h3>{planNameMap[tier.planId as keyof typeof planNameMap] ?? tier.planId}</h3>
                </div>
                <div class="ps-access-columns">
                  <div class="ps-access-column">
                    <span class="ps-access-label">{psAccessLabels?.included}</span>
                    <ul>
                      {(tier.included ?? []).map((item: string) => (
                        <li>{item}</li>
                      ))}
                    </ul>
                  </div>
                  <div class="ps-access-column">
                    <span class="ps-access-label">{psAccessLabels?.available}</span>
                    <ul>
                      {(tier.available ?? []).map((item: string) => (
                        <li>{item}</li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- Advanced Details Section -->
    <section class="ps-details section-dark">
      <div class="container">
        <!-- Service Types -->
        <div class="service-types">
          <h2>{t('pages.pricing.professionalServices.serviceTypes.heading')}</h2>
          <p class="service-types-intro">{t('pages.pricing.professionalServices.serviceTypes.intro')}</p>

          {serviceTypes.map((service, index) => (
            <details class="service-type-item">
              <summary>
                <span class="service-type-icon" set:html={service.icon} />
                <span class="service-type-name">{service.name}</span>
                <span class="expand-icon">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="6 9 12 15 18 9"/>
                  </svg>
                </span>
              </summary>
              <div class="service-type-details">
                <div class="service-detail-item">
                  <div class="detail-badge standard">{t('pages.pricing.professionalServices.serviceTypes.badgeLabels.standard')}</div>
                  <p>{service.standard}</p>
                </div>
                <div class="service-detail-item">
                  <div class="detail-badge priority">{t('pages.pricing.professionalServices.serviceTypes.badgeLabels.priority')}</div>
                  <p>{service.priority}</p>
                </div>
                <div class="service-detail-item">
                  <div class="detail-badge emergency">{t('pages.pricing.professionalServices.serviceTypes.badgeLabels.emergency')}</div>
                  <p>{service.emergency}</p>
                </div>
              </div>
            </details>
          ))}
        </div>

        <!-- Implementation Tier Overview -->
        <div class="implementation-overview">
          <h2>{t('pages.pricing.professionalServices.packages.standard.tierHeading')}</h2>
          <div class="implementation-grid">
            {ta('pages.pricing.professionalServices.packages.standard.tiers').map((tier: string) => {
              const [label, price] = tier.split(':').map(part => part.trim());
              return (
                <div class="implementation-card">
                  <h3>{label}</h3>
                  <p>{price}</p>
                </div>
              );
            })}
          </div>
        </div>

        <!-- Pricing Factors -->
        <div class="pricing-factors">
          <h2>{t('pages.pricing.professionalServices.pricingFactors.heading')}</h2>
          <p class="factors-intro">{t('pages.pricing.professionalServices.pricingFactors.intro')}</p>
          <div class="factors-grid">
            {pricingFactors.map((factor: any) => (
              <div class="factor-item">
                <div class="factor-icon">
                  <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="3"/>
                    <path d="M12 1v6m0 6v6M5.6 5.6l4.2 4.2m4.2 4.2l4.2 4.2M1 12h6m6 0h6M5.6 18.4l4.2-4.2m4.2-4.2l4.2-4.2"/>
                  </svg>
                </div>
                <h3>{factor.title}</h3>
                <p>{factor.description}</p>
              </div>
            ))}
          </div>
          <p class="factors-note"><strong>Example:</strong> {t('pages.pricing.professionalServices.pricingFactors.note')}</p>
        </div>

        <!-- Retainer Options -->
        {psRetainerItems.length > 0 && (
          <div class="retainer-options">
            <h2>{psRetainers?.heading}</h2>
            <p class="retainer-description">{psRetainers?.description}</p>
            <div class="retainer-grid">
              {psRetainerItems.map((item: any) => (
                <div class="retainer-card">
                  <h3>{item.title}</h3>
                  <div class="retainer-price">{item.price}</div>
                  <ul>
                    {(item.bullets ?? []).map((bullet: string) => (
                      <li>{bullet}</li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          </div>
        )}

        <!-- Benefits -->
        <div class="services-benefits">
          <h2>{t('pages.pricing.professionalServices.benefits.heading')}</h2>
          {ta('pages.pricing.professionalServices.benefits.statistics').map((stat: string) => (
            <p class="benefit-stat"><strong>{stat}</strong></p>
          ))}
          <p>{t('pages.pricing.professionalServices.benefits.description')}</p>
          <ul>
            {ta('pages.pricing.professionalServices.benefits.items').map((item: string) => (
              <li>{item}</li>
            ))}
          </ul>
        </div>
      </div>
    </section>

    <!-- Final CTA Section -->
    <section class="ps-cta section-light">
      <div class="container">
        <div class="cta-content">
          <h2>{t('pages.professionalServices.cta.heading')}</h2>
          <p>{t('pages.professionalServices.cta.description')}</p>
          <a href={EXTERNAL_LINKS.SCHEDULE_CONSULTATION}
             target="_blank"
             rel="noopener noreferrer"
             class="btn btn-primary btn-large">
            {t('pages.professionalServices.cta.button')}
          </a>
          <p class="cta-subtext">{t('pages.professionalServices.cta.subtext')}</p>
        </div>
      </div>
    </section>
  </article>
</BaseLayout>
