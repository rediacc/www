---
import { getCollection } from 'astro:content';
import ContentLayout from '../../../layouts/ContentLayout.astro';
import StructuredData from '../../../components/StructuredData.astro';
import { DEFAULT_LANGUAGE, SUPPORTED_LANGUAGES } from '../../../i18n/language-utils';
import type { Language } from '../../../i18n/types';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  const allPosts = await getCollection('blog');

  const paths = [];

  // Generate paths for each post in each language
  for (const post of posts) {
    const lang = (post.data.language || DEFAULT_LANGUAGE) as Language;

    // Extract just the slug without language prefix (e.g., "es/post-slug" -> "post-slug")
    const slugParts = post.slug.split('/');
    const baseSlug = slugParts.length > 1 ? slugParts[slugParts.length - 1] : post.slug;

    // Find all translations of this post (match by base slug)
    const translations = allPosts
      .filter((p) => {
        const pSlugParts = p.slug.split('/');
        const pBaseSlug = pSlugParts.length > 1 ? pSlugParts[pSlugParts.length - 1] : p.slug;
        return pBaseSlug === baseSlug;
      })
      .map((p) => ({
        lang: (p.data.language || DEFAULT_LANGUAGE) as Language,
        url: `/${p.data.language || DEFAULT_LANGUAGE}/blog/${baseSlug}`,
      }));

    paths.push({
      params: { lang, slug: baseSlug },
      props: { post, allPosts, translations },
    });
  }

  return paths;
}

const { post, allPosts, translations } = Astro.props as {
  post: any;
  allPosts: any[];
  translations: Array<{ lang: Language; url: string }>;
};

const { Content } = await post.render();
const currentLang = (post.data.language || DEFAULT_LANGUAGE) as Language;

// Extract base slug without language prefix (e.g., "en/getting-started" -> "getting-started")
const slugParts = post.slug.split('/');
const baseSlug = slugParts.length > 1 ? slugParts[slugParts.length - 1] : post.slug;

// Check if this is a fallback (English content shown for Spanish request)
const isFallback = Astro.params.lang !== currentLang;
---

<ContentLayout
  frontmatter={post.data}
  url={`/${Astro.params.lang}/blog/${baseSlug}`}
  currentLang={Astro.params.lang as Language}
  availableLanguages={translations}
  showFallbackNotice={isFallback}
  collection="blog"
>
  <Fragment slot="head">
    <StructuredData
      type="blogposting"
      data={{
        title: post.data.title,
        description: post.data.description,
        author: post.data.author,
        publishedDate: post.data.publishedDate.toISOString(),
        updatedDate: post.data.updatedDate?.toISOString(),
        image: post.data.image,
        url: `https://www.rediacc.com/${Astro.params.lang}/blog/${baseSlug}`,
        language: currentLang,
        tags: post.data.tags,
        category: post.data.category
      }}
    />
  </Fragment>
  <Content />
</ContentLayout>
