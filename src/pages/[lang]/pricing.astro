---
import BaseLayout from '../../layouts/BaseLayout.astro';
import PricingCard from '../../components/PricingCard.astro';
import ServicePackageCard from '../../components/ServicePackageCard.astro';
import FAQSection from '../../components/FAQSection.astro';
import { createTranslator } from '../../i18n/utils';
import { SUPPORTED_LANGUAGES } from '../../i18n/language-utils';
import type { Language } from '../../i18n/types';
import { EXTERNAL_LINKS } from '../../config/constants';
import '../../styles/pricing-page.css';

export async function getStaticPaths() {
  return SUPPORTED_LANGUAGES.map((lang) => ({
    params: { lang },
    props: { lang },
  }));
}

const { lang } = Astro.params as { lang: Language };
const { t, ta, to } = createTranslator(lang);

// Pricing plans data
const communityPlan = {
  id: 'community',
  name: t('pages.pricing.plans.community.name'),
  price: '$0',
  period: null,
  description: t('pages.pricing.plans.community.description'),
  features: ta('pages.pricing.plans.community.features')
};

const businessPlans = [
  {
    id: 'pro',
    name: t('pages.pricing.plans.pro.name'),
    price: '$399',
    period: 'per month',
    description: t('pages.pricing.plans.pro.description'),
    isPopular: true,
    features: ta('pages.pricing.plans.pro.features')
  },
  {
    id: 'business',
    name: t('pages.pricing.plans.business.name'),
    price: '$799',
    period: 'per month',
    description: t('pages.pricing.plans.business.description'),
    isPopular: false,
    features: ta('pages.pricing.plans.business.features')
  },
  {
    id: 'enterprise',
    name: t('pages.pricing.plans.enterprise.name'),
    price: '$2,100',
    priceNote: t('pages.pricing.plans.enterprise.priceNote'),
    period: 'per month',
    description: t('pages.pricing.plans.enterprise.description'),
    isPopular: false,
    features: ta('pages.pricing.plans.enterprise.features')
  }
];

// Service packages data
const servicePackages = [
  {
    id: 'standard',
    name: t('pages.pricing.professionalServices.packages.standard.name'),
    price: '$9,999',
    turnaround: t('pages.pricing.professionalServices.packages.standard.turnaround'),
    description: t('pages.pricing.professionalServices.packages.standard.description'),
    isPopular: false,
    icon: '<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><rect x="3" y="3" width="18" height="18" rx="2"/><path d="M9 11l3 3 5-5"/></svg>'
  },
  {
    id: 'priority',
    name: t('pages.pricing.professionalServices.packages.priority.name'),
    price: '$19,999',
    turnaround: t('pages.pricing.professionalServices.packages.priority.turnaround'),
    description: t('pages.pricing.professionalServices.packages.priority.description'),
    isPopular: true,
    icon: '<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"/></svg>'
  },
  {
    id: 'emergency',
    name: t('pages.pricing.professionalServices.packages.emergency.name'),
    price: '$29,999',
    turnaround: t('pages.pricing.professionalServices.packages.emergency.turnaround'),
    description: t('pages.pricing.professionalServices.packages.emergency.description'),
    isPopular: false,
    icon: '<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"/><path d="M12 6v6l4 2"/></svg>'
  }
];

// Service types with details for each package - get from translations
const serviceTypesDataRaw = ta('pages.pricing.professionalServices.serviceTypes.services');
const serviceTypes = serviceTypesDataRaw.map((service: any) => ({
  name: service.name,
  icon: getIconForService(service.id),
  standard: service.standard,
  priority: service.priority,
  emergency: service.emergency
}));

// Get pricing factors data
const pricingFactorsData = ta('pages.pricing.professionalServices.pricingFactors.factors');
const pricingFactors = pricingFactorsData;

function getIconForService(id: string): string {
  const icons: Record<string, string> = {
    'data-migration': '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M9 3L5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z"/></svg>',
    'ransomware-recovery': '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM9 6c0-1.66 1.34-3 3-3s3 1.34 3 3v2H9V6z"/></svg>',
    'security-assessment': '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4z"/></svg>',
    'infrastructure-scaling': '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/></svg>',
    'team-training': '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M12 3L1 9l4 2.18v6L12 21l7-3.82v-6l2-1.09V17h2V9L12 3zm6.82 6L12 12.72 5.18 9 12 5.28 18.82 9zM17 15.99l-5 2.73-5-2.73v-3.72L12 15l5-2.73v3.72z"/></svg>',
    'performance-optimization': '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M20.5 11H19V7c0-1.1-.9-2-2-2h-4V3.5C13 2.12 11.88 1 10.5 1S8 2.12 8 3.5V5H4c-1.1 0-1.99.9-1.99 2v3.8H3.5c1.49 0 2.7 1.21 2.7 2.7s-1.21 2.7-2.7 2.7H2V20c0 1.1.9 2 2 2h3.8v-1.5c0-1.49 1.21-2.7 2.7-2.7 1.49 0 2.7 1.21 2.7 2.7V22H17c1.1 0 2-.9 2-2v-4h1.5c1.38 0 2.5-1.12 2.5-2.5S21.88 11 20.5 11z"/></svg>',
    'custom-integration': '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/></svg>'
  };
  return icons[id] || '';
}
---

<BaseLayout
  lang={lang}
  title={t('pages.pricing.meta.title')}
  description={t('pages.pricing.meta.description')}
  keywords={t('pages.pricing.meta.keywords')}
  ogType="website"
  structuredDataType="organization"
>
  <article class="pricing-page">
    <!-- Hero Section -->
    <section id="pricing-plans" class="pricing-hero section-dark">
      <div class="pricing-hero-content">
        <h1>{t('pages.pricing.hero.title')}</h1>
        <p class="hero-subtitle">{t('pages.pricing.hero.subtitle')}</p>
      </div>
    </section>

    <!-- Pricing Toggle & Cards -->
    <section id="plans" class="pricing-content section-light">
      <div class="container">
        <!-- Toggle Buttons -->
        <div class="pricing-toggle">
          <button class="toggle-btn active" data-toggle="individuals">
            {t('pages.pricing.toggleButtons.individuals')}
          </button>
          <button class="toggle-btn" data-toggle="businesses">
            {t('pages.pricing.toggleButtons.businesses')}
          </button>
        </div>

        <!-- Individual Plan View -->
        <div class="pricing-grid individuals-view active">
          <PricingCard plan={communityPlan} lang={lang} />
        </div>

        <!-- Business Plans View -->
        <div class="pricing-grid businesses-view">
          {businessPlans.map(plan => (
            <PricingCard plan={plan} lang={lang} />
          ))}
        </div>

        <!-- Enterprise CTA -->
        <div class="enterprise-cta">
          <div class="enterprise-content">
            <h3>{t('pages.pricing.enterpriseCta.heading')}</h3>
            <p>{t('pages.pricing.enterpriseCta.description')}</p>
          </div>
          <a href={EXTERNAL_LINKS.SCHEDULE_CONSULTATION} target="_blank" rel="noopener noreferrer" class="btn btn-primary btn-large">
            {t('pages.pricing.enterpriseCta.button')}
          </a>
        </div>
      </div>
    </section>

    <!-- Professional Service Packages Section -->
    <section id="professional-services" class="services-section section-dark">
      <div class="container">
        <div class="services-header">
          <h2>{t('pages.pricing.professionalServices.header.title')}</h2>
          <p class="services-subtitle">{t('pages.pricing.professionalServices.header.subtitle')}</p>
          <div class="services-badge">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
              <path d="M13 10V3L4 14h7v7l9-11h-7z"/>
            </svg>
            <span>{t('pages.pricing.professionalServices.header.badge')}</span>
          </div>
          <div class="services-eligibility">
            <strong>{t('pages.pricing.professionalServices.header.eligibility')}</strong>
          </div>
        </div>

        <!-- Service Package Cards -->
        <div class="service-packages-grid">
          {servicePackages.map(pkg => (
            <ServicePackageCard package={pkg} lang={lang} />
          ))}
        </div>

        <!-- Pricing Factors -->
        <div class="pricing-factors">
          <h3>{t('pages.pricing.professionalServices.pricingFactors.heading')}</h3>
          <p class="factors-intro">{t('pages.pricing.professionalServices.pricingFactors.intro')}</p>
          <div class="factors-grid">
            {pricingFactors.map((factor: any) => (
              <div class="factor-item">
                <div class="factor-icon">
                  <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="3"/>
                    <path d="M12 1v6m0 6v6M5.6 5.6l4.2 4.2m4.2 4.2l4.2 4.2M1 12h6m6 0h6M5.6 18.4l4.2-4.2m4.2-4.2l4.2-4.2"/>
                  </svg>
                </div>
                <h4>{factor.title}</h4>
                <p>{factor.description}</p>
              </div>
            ))}
          </div>
          <p class="factors-note"><strong>Example:</strong> {t('pages.pricing.professionalServices.pricingFactors.note')}</p>
        </div>


        <!-- Service Types -->
        <div class="service-types">
          <h3>{t('pages.pricing.professionalServices.serviceTypes.heading')}</h3>
          <p class="service-types-intro">{t('pages.pricing.professionalServices.serviceTypes.intro')}</p>

          {serviceTypes.map((service, index) => (
            <details class="service-type-item">
              <summary>
                <span class="service-type-icon" set:html={service.icon} />
                <span class="service-type-name">{service.name}</span>
                <span class="expand-icon">
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="6 9 12 15 18 9"/>
                  </svg>
                </span>
              </summary>
              <div class="service-type-details">
                <div class="service-detail-item">
                  <div class="detail-badge standard">{t('pages.pricing.professionalServices.serviceTypes.badgeLabels.standard')}</div>
                  <p>{service.standard}</p>
                </div>
                <div class="service-detail-item">
                  <div class="detail-badge priority">{t('pages.pricing.professionalServices.serviceTypes.badgeLabels.priority')}</div>
                  <p>{service.priority}</p>
                </div>
                <div class="service-detail-item">
                  <div class="detail-badge emergency">{t('pages.pricing.professionalServices.serviceTypes.badgeLabels.emergency')}</div>
                  <p>{service.emergency}</p>
                </div>
              </div>
            </details>
          ))}
        </div>

        <!-- Benefits -->
        <div class="services-benefits">
          <h4>{t('pages.pricing.professionalServices.benefits.heading')}</h4>
          {ta('pages.pricing.professionalServices.benefits.statistics').map((stat) => (
            <p><strong>{stat}</strong></p>
          ))}
          <p>{t('pages.pricing.professionalServices.benefits.description')}</p>
          <ul>
            {ta('pages.pricing.professionalServices.benefits.items').map((item) => (
              <li>{item}</li>
            ))}
          </ul>
        </div>

        <!-- CTA -->
        <div class="services-cta">
          <h4>{t('pages.pricing.professionalServices.cta.heading')}</h4>
          <p>{t('pages.pricing.professionalServices.cta.description')}</p>
          <a href={EXTERNAL_LINKS.SCHEDULE_CONSULTATION}
             target="_blank"
             rel="noopener noreferrer"
             class="btn btn-primary btn-large">
            {t('pages.pricing.professionalServices.cta.button')}
          </a>
        </div>
      </div>
    </section>

    <!-- FAQ Section -->
    <FAQSection lang={lang} />

    <!-- CTA Section -->
    <section id="get-started" class="pricing-cta section-dark">
      <div class="container">
        <h2>{t('pages.pricing.finalCta.heading')}</h2>
        <p>{t('pages.pricing.finalCta.description')}</p>
        <div class="cta-actions">
          <a href={EXTERNAL_LINKS.SCHEDULE_CONSULTATION} target="_blank" rel="noopener noreferrer" class="btn btn-primary btn-large">
            {t('pages.pricing.finalCta.buttons.startFree')}
          </a>
          <a href={EXTERNAL_LINKS.SCHEDULE_CONSULTATION} target="_blank" rel="noopener noreferrer" class="btn btn-secondary btn-large">
            {t('pages.pricing.finalCta.buttons.talkToSales')}
          </a>
        </div>
      </div>
    </section>
  </article>
</BaseLayout>

<script>
  // Toggle between individual and business plans
  const toggleBtns = document.querySelectorAll('.toggle-btn');
  const individualsView = document.querySelector('.individuals-view');
  const businessesView = document.querySelector('.businesses-view');

  toggleBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const toggleType = btn.dataset.toggle;

      // Update button states
      toggleBtns.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');

      // Show/hide appropriate view
      if (toggleType === 'individuals') {
        individualsView?.classList.add('active');
        businessesView?.classList.remove('active');
      } else {
        individualsView?.classList.remove('active');
        businessesView?.classList.add('active');
      }
    });
  });
</script>
