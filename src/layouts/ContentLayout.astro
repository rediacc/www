---
import BaseLayout from './BaseLayout.astro';
import LanguageSwitcher from '../components/LanguageSwitcher';
import Breadcrumb from '../components/Breadcrumb.astro';
import type { CollectionEntry } from 'astro:content';
import type { Language } from '../i18n/types';
import { createTranslator } from '../i18n/utils';

interface Props {
  frontmatter: {
    title: string;
    description: string;
    publishedDate?: Date;
    author?: string;
    category?: string;
    tags?: string[];
    toc?: boolean;
  };
  url: string;
  currentLang?: Language;
  availableLanguages?: Array<{ lang: Language; url: string }>;
  showFallbackNotice?: boolean;
  collection?: 'blog' | 'docs';
}

const { frontmatter, url, currentLang, availableLanguages = [], showFallbackNotice = false, collection } = Astro.props;

// Determine if this is a blog post or doc
const isBlogPost = url.includes('/blog/');
const isDoc = url.includes('/docs/');

// Generate breadcrumbs
const { t } = createTranslator(currentLang || 'en');
const breadcrumbItems = [];

if (currentLang) {
  // Add Home
  breadcrumbItems.push({
    name: t('navigation.home'),
    url: `/${currentLang}/`
  });

  // Add collection level (Blog or Docs)
  if (isBlogPost) {
    breadcrumbItems.push({
      name: t('navigation.blog'),
      url: `/${currentLang}/blog/`
    });
  } else if (isDoc) {
    breadcrumbItems.push({
      name: t('navigation.docs'),
      url: `/${currentLang}/docs/`
    });
  }

  // Add current page
  breadcrumbItems.push({
    name: frontmatter.title,
    url: url
  });
}

// Generate table of contents from headings
function generateTOC(content: string) {
  const headingRegex = /^(#{1,6})\s+(.+)$/gm;
  const headings: Array<{ level: number; title: string; id: string }> = [];
  let match;

  while ((match = headingRegex.exec(content)) !== null) {
    const level = match[1].length;
    const title = match[2];
    const id = title
      .toLowerCase()
      .replace(/[^\w\s-]/g, '')
      .replace(/\s+/g, '-');

    headings.push({ level, title, id });
  }

  return headings;
}

const toc = frontmatter.toc !== false ? generateTOC(await Astro.slots.render('default')) : [];
---

<BaseLayout
  title={frontmatter.title}
  description={frontmatter.description}
  lang={currentLang}
>
  <Fragment slot="head">
    <slot name="head" />
  </Fragment>
  <article class="content-article">
    {breadcrumbItems.length > 0 && (
      <Breadcrumb items={breadcrumbItems} />
    )}
    <header class="article-header">
      {currentLang && availableLanguages.length > 0 && (
        <LanguageSwitcher
          client:visible
          currentLang={currentLang}
          availableLanguages={availableLanguages}
          showFallbackNotice={showFallbackNotice}
        />
      )}

      <div class="article-meta">
        {isBlogPost && frontmatter.author && (
          <span class="meta-item">
            <span class="meta-label">By</span>
            <span class="meta-value">{frontmatter.author}</span>
          </span>
        )}

        {isBlogPost && frontmatter.publishedDate && (
          <span class="meta-item">
            <span class="meta-label">Published</span>
            <time datetime={frontmatter.publishedDate.toISOString()}>
              {new Date(frontmatter.publishedDate).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </time>
          </span>
        )}

        {isBlogPost && frontmatter.category && (
          <span class="meta-item">
            <span class="meta-label">Category</span>
            <span class="meta-value">{frontmatter.category}</span>
          </span>
        )}
      </div>

      <h1 class="article-title">{frontmatter.title}</h1>

      {frontmatter.description && (
        <p class="article-description">{frontmatter.description}</p>
      )}

      {isBlogPost && frontmatter.tags && frontmatter.tags.length > 0 && (
        <div class="article-tags">
          {frontmatter.tags.map(tag => (
            <a href={`/blog/tags/${tag}`} class="tag">#{tag}</a>
          ))}
        </div>
      )}
    </header>

    <div class="article-container">
      {toc.length > 0 && (
        <aside class="toc-sidebar">
          <nav class="toc-nav">
            <h3 class="toc-title">On this page</h3>
            <ul class="toc-list">
              {toc.map(heading => (
                <li class={`toc-item toc-level-${heading.level}`}>
                  <a href={`#${heading.id}`}>{heading.title}</a>
                </li>
              ))}
            </ul>
          </nav>
        </aside>
      )}

      <main class="article-content">
        <slot />
      </main>
    </div>
  </article>

  <style is:global>
    .content-article {
      max-width: 900px;
      margin: 0 auto;
      padding: 2rem 1rem;
    }

    .article-header {
      margin-bottom: 3rem;
    }

    .article-meta {
      display: flex;
      flex-wrap: wrap;
      gap: 1.5rem;
      margin-bottom: 1rem;
      font-size: 0.875rem;
      color: var(--color-text-secondary, #666);
    }

    .meta-item {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .meta-label {
      font-weight: 600;
    }

    .article-title {
      font-size: 2.5rem;
      line-height: 1.2;
      margin: 1rem 0;
      color: var(--color-text-primary, #000);
    }

    .article-description {
      font-size: 1.125rem;
      color: var(--color-text-secondary, #666);
      margin: 1rem 0;
    }

    .article-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-top: 1rem;
    }

    .tag {
      display: inline-block;
      padding: 0.25rem 0.75rem;
      background-color: var(--color-bg-secondary, #f5f5f5);
      color: var(--color-primary, #0066cc);
      border-radius: 4px;
      text-decoration: none;
      font-size: 0.875rem;
      transition: background-color 0.2s;
    }

    .tag:hover {
      background-color: var(--color-bg-tertiary, #e8e8e8);
    }

    .article-container {
      display: grid;
      grid-template-columns: 1fr 250px;
      gap: 3rem;
    }

    .toc-sidebar {
      position: sticky;
      top: 2rem;
      height: fit-content;
    }

    .toc-nav {
      padding: 1rem;
      background-color: var(--color-bg-secondary, #f9f9f9);
      border-radius: 8px;
      border-left: 3px solid var(--color-primary, #0066cc);
    }

    .toc-title {
      font-size: 0.875rem;
      font-weight: 600;
      text-transform: uppercase;
      color: var(--color-text-secondary, #666);
      margin: 0 0 1rem 0;
    }

    .toc-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .toc-item {
      margin: 0.5rem 0;
    }

    .toc-level-2 {
      margin-left: 0;
    }

    .toc-level-3 {
      margin-left: 1rem;
      font-size: 0.9rem;
    }

    .toc-level-4 {
      margin-left: 1.5rem;
      font-size: 0.85rem;
    }

    .toc-level-5,
    .toc-level-6 {
      margin-left: 2rem;
      font-size: 0.8rem;
    }

    .toc-item a {
      color: var(--color-primary, #0066cc);
      text-decoration: none;
      transition: color 0.2s;
    }

    .toc-item a:hover {
      color: var(--color-primary-dark, #0052a3);
      text-decoration: underline;
    }

    .article-content {
      min-width: 0;
    }

    .article-content h2,
    .article-content h3,
    .article-content h4,
    .article-content h5,
    .article-content h6 {
      margin: 2rem 0 1rem 0;
      scroll-margin-top: 6rem;
    }

    .article-content h2 {
      font-size: 1.75rem;
      border-bottom: 2px solid var(--color-border, #e0e0e0);
      padding-bottom: 0.5rem;
    }

    .article-content h3 {
      font-size: 1.375rem;
    }

    .article-content p {
      margin: 1rem 0;
      line-height: 1.8;
    }

    .article-content code {
      background-color: var(--color-bg-secondary, #f5f5f5);
      padding: 0.2rem 0.4rem;
      border-radius: 3px;
      font-family: 'Courier New', monospace;
      font-size: 0.9em;
    }

    .article-content pre {
      background-color: var(--color-bg-secondary, #f5f5f5);
      padding: 1rem;
      border-radius: 8px;
      overflow-x: auto;
      margin: 1rem 0;
    }

    .article-content pre code {
      background-color: transparent;
      padding: 0;
    }

    .article-content blockquote {
      border-left: 4px solid var(--color-primary, #0066cc);
      padding-left: 1rem;
      margin: 1rem 0;
      color: var(--color-text-secondary, #666);
      font-style: italic;
    }

    .article-content ul,
    .article-content ol {
      margin: 1rem 0;
      padding-left: 2rem;
    }

    .article-content li {
      margin: 0.5rem 0;
      line-height: 1.8;
    }

    .article-content table {
      width: 100%;
      border-collapse: collapse;
      margin: 1rem 0;
    }

    .article-content th,
    .article-content td {
      border: 1px solid var(--color-border, #e0e0e0);
      padding: 0.75rem;
      text-align: left;
    }

    .article-content th {
      background-color: var(--color-bg-secondary, #f5f5f5);
      font-weight: 600;
    }

    .article-content a {
      color: var(--color-primary, #0066cc);
      text-decoration: none;
      transition: color 0.2s;
    }

    .article-content a:hover {
      text-decoration: underline;
    }

    @media (max-width: 768px) {
      .article-container {
        grid-template-columns: 1fr;
      }

      .toc-sidebar {
        position: static;
        top: auto;
        margin-bottom: 2rem;
      }

      .article-title {
        font-size: 1.75rem;
      }

      .article-meta {
        font-size: 0.75rem;
        gap: 1rem;
      }
    }
  </style>
</BaseLayout>
